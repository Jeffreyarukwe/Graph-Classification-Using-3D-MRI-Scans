# -*- coding: utf-8 -*-
"""Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HT0ZWPpeb_hoCmX4Nf1BsJ7wth4DBQdX

**Project 2**

Name: Chidozie Jeffrey Arukwe

"""

#pip list

!pip install torch-scatter
!pip install torch-geometric
!pip install --verbose --no-cache-dir torch-sparse

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# pwd

from google.colab import drive #or manually upload the provided dataset instead if preferred. 
drive.mount('/content/drive')

# Run the cells sequentially

import pandas as pd
import numpy as np
import torch

# Reading the structural connectivity matrix
df = pd.read_csv("./drive/MyDrive/Training/CN/CN1/StructuralConnectivity.txt", sep=r'\s{2,}', header = None, engine= "python")

df.head()

# Reading the fmri connectivity matrix
df1 = pd.read_csv("./drive/MyDrive/Training/CN/CN1/FunctionalConnectivity.txt", sep=r'\s{2,}', header = None, engine= "python")  
df1.head()

from torch_geometric.data import Data, DataLoader
from scipy.sparse import coo_matrix

# Function to get data from the folders and combining them to form the train, test and feature data
def get_data(dataset = "Training", feature = False):
    normal_patient = []
    ad_patient = []
    if dataset == "Training" and feature == False:
        for i in range(1,8):
            normal_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/CN/CN'+str(i)+'/StructuralConnectivity.txt'), 1])
            ad_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/AD/AD'+str(i)+'/StructuralConnectivity.txt'), 0])
    
    elif dataset == "Testing" and feature == False:
        for i in range(8,11):
            normal_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/CN/CN'+str(i)+'/StructuralConnectivity.txt'), 1])
            ad_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/AD/AD'+str(i)+'/StructuralConnectivity.txt'), 0])
    
    elif dataset == "Training" and feature == True:
        for i in range(1,8):
            normal_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/CN/CN'+str(i)+'/FunctionalConnectivity.txt'), 1])
            ad_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/AD/AD'+str(i)+'/FunctionalConnectivity.txt'), 0])
    
    elif dataset == "Testing" and feature == True:
        for i in range(8,11):
            normal_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/CN/CN'+str(i)+'/FunctionalConnectivity.txt'), 1])
            ad_patient.append([np.genfromtxt('./drive/MyDrive/'+dataset+'/AD/AD'+str(i)+'/FunctionalConnectivity.txt'), 0])
            
    data = []
    for i in range(len(normal_patient)):
        data.append(normal_patient[i])
        data.append(ad_patient[i])
    
    del normal_patient, ad_patient
    return data

# Using the PyTorch Geometric's Data class to load the data into the Data class needed to create the dataset
def create_dataset(data, features = None):
    dataset_list = []
    for i in range(len(data)):
        degree_matrix = np.count_nonzero(data[i][0], axis=1).reshape(150,1)
        weight_matrix = np.diag(np.sum(data[i][0], axis=1)).diagonal().reshape(150,1)
        feature_matrix = np.hstack((degree_matrix, weight_matrix))
        edge_index_coo = coo_matrix(data[i][0])
        edge_index_coo = torch.tensor(np.vstack((edge_index_coo.row, edge_index_coo.col)), dtype = torch.long)
        if features != None:
            feature_matrix = features[i][0]
        graph_data = Data(x = torch.tensor(feature_matrix, dtype = torch.float32), edge_index=edge_index_coo, y = torch.tensor(data[i][1]))
        dataset_list.append(graph_data)
    return dataset_list



train_data = get_data("Training")
train_data_features = get_data("Training", feature=True)

test_data = get_data("Testing")
test_data_features = get_data("Testing", feature=True)

training_dataset = create_dataset(train_data, features = train_data_features)
testing_dataset = create_dataset(test_data, features = test_data_features)

# After getting the Datasets we load the data into the respective Dataloader

train_loader = DataLoader(training_dataset, batch_size=5, shuffle = True)
test_loader = DataLoader(testing_dataset, batch_size=5, shuffle=True)

from torch.nn import Linear
import torch.nn.functional as F
from torch_geometric.nn import GCNConv
from torch_geometric.nn import global_mean_pool, global_max_pool 


class GCN(torch.nn.Module):
    def __init__(self, hidden_channels):
        super(GCN, self).__init__()
        torch.manual_seed(123)
        self.conv1 = GCNConv(150, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.lin1 = Linear(hidden_channels, 2)

    def forward(self, x, edge_index, batch):
        # 1. Obtain node embeddings 
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        x = F.relu(x)

        # 2. Readout layer
        x = global_mean_pool(x, batch)  # [batch_size, hidden_channels]

        # 3. Apply a final classifier
        x = F.dropout(x, p=0.3, training=self.training)
        x = self.lin1(x)
        
        return x

model = GCN(hidden_channels=64)
print(model)

model = GCN(hidden_channels=64)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
criterion = torch.nn.CrossEntropyLoss()

def train():
    model.train()

    for data in train_loader:  # Iterate in batches over the training dataset.
        out = model(data.x, data.edge_index, data.batch)  # Perform a single forward pass.
        loss = criterion(out, data.y)  # Computing the loss.
        loss.backward()  # Deriving gradients.
        optimizer.step()  # Updating parameters based on gradients.
        optimizer.zero_grad()  # Clearing gradients.

def test(loader):
    model.eval()

    correct = 0
    for data in loader:  # Iterate in batches over the training/test dataset.
        out = model(data.x, data.edge_index, data.batch)  
        pred = out.argmax(dim=1)  # Use the class with highest probability.
        correct += int((pred == data.y).sum())  # Check against ground-truth labels.
    return correct / len(loader.dataset)  # Derive ratio of correct predictions.


for epoch in range(1, 101):
    train()
    train_acc = test(train_loader)
    test_acc = test(test_loader)
    if epoch % 25 == 0:
        print(f'Epoch: {epoch:03d}, Train Acc: {train_acc:.4f}, Test Acc: {test_acc:.4f}')



"""Data Visualization"""

import seaborn as sn
import matplotlib.pyplot as plt
sn.heatmap(df.iloc[:5,:], annot=True)

# Viewed the feature matrix in form of a confusion matrix
plt.figure(figsize = (10,10))
sn.heatmap(df1.iloc[:10, :10], annot=True)















































































